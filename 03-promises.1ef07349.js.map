{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAGuC,IAUnCC,EACAC,EACAC,EAZEC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,OAAQF,SAASC,cAAc,WAmDqD,SAA7EE,EAAcC,EAAUC,GAC/B,IAAMC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEJ,WAAUC,UAEpBI,EAAO,CAAEL,WAAUC,S,GAEpBA,E,IAIL,OAFAS,QAAQC,IAAIT,GAELA,C,CA3D6BR,EAAjCC,KAAKiB,iBAAiB,SAOY,SAAlBC,GAMoBtB,EAA1BuB,OAAOD,EAAEE,cAAcC,SAASf,MAAMgB,OACnDzB,EAAYsB,OAAOD,EAAEE,cAAcC,SAASE,KAAKD,OACjDxB,EAAiBqB,OAAOD,EAAEE,cAAcC,SAASG,OAAOF,M,IAd1DvB,EAAKI,OAAOc,iBAAiB,SAoBe,SAArBC,GAGWA,EAA9BO,iBACFV,QAAQC,IAAI,4CAIiD,IAFI,IAA7DU,EAAQ9B,EAEH+B,EAAI,EAAGA,GAAK7B,EAAgB6B,GAAK,EAENvB,EAApBuB,EAAGD,GAEsEE,MAA/E,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBwB,EAAApC,GAASqC,OAAOC,QAAQ,sBAAqCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGpE4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBwB,EAAApC,GAASqC,OAAOI,QAAQ,qBAAoCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAIhCoB,GAAtB7B,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n// =============нашла ссылки на элементы кнопку и на саму форму==========\nconst refs = {\n  form: document.querySelector('.form'),\n  submit: document.querySelector('button'),\n};\n// console.log(refs.form);\n// console.log(refs.submit);\n// ============вешаю слушателей событий на форму и на кнопку\nrefs.form.addEventListener('input', onFormInput);\nrefs.submit.addEventListener('click', onSubmitClick);\n// ==========глобальные переменные, которые будут принимать введеные значения в полях формы\nlet firstDelay;\nlet stepDelay;\nlet amountPromises;\n// =======функция обработчик собития ввода в поля формы==================\nfunction onFormInput(e) {\n  // console.log(e.target.value);\n  // console.log(e.currentTarget.elements.delay.value);\n  // console.log(e.currentTarget.elements.step.value);\n  // console.log(e.currentTarget.elements.amount.value);\n  // =========в переменнеые записываю значения полей формы================\n  firstDelay = Number(e.currentTarget.elements.delay.value);\n  stepDelay = Number(e.currentTarget.elements.step.value);\n  amountPromises = Number(e.currentTarget.elements.amount.value);\n  // console.log(firstDelay);\n  // console.log(stepDelay);\n  // console.log(amountPromises);\n}\n// ==========функция обработчик события клика на кнопку создать======\nfunction onSubmitClick(e) {\n  // =======запрет браузеру перезагружать страницу при нажатии на кнопку, =\n  // ===(иначе обнуляются данные в полях формы===\n  e.preventDefault();\n  console.log('вызываем функцию, которая создает промис');\n  // ===присваиваем переменной значение  задержки перед  созданием первого промиса====\n  let delay = firstDelay;\n  // запускаем цикл, столько раз, сколько пользователь ввел в поле количество\n  for (let i = 1; i <= amountPromises; i += 1) {\n    //  вызиваю функцию которая создает промис\n    createPromise(i, delay)\n      // методы промиса для успешного и не успешного завершения, использую библиотеку для вывода сообщения\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(` Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(` Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(` Rejected promise ${position} in ${delay}ms`);\n        // console.log(` Rejected promise ${position} in ${delay}ms`);\n      });\n    // увеличиваем время задержки на величину шага\n    delay = delay + stepDelay;\n  }\n}\n// функция которая создает промис, принимает позицию(номер) промиса и время через которое он будет создан\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  console.log(promise);\n  // возвращает промис\n  return promise;\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$stepDelay","$ce04d3a99e08e73b$var$amountPromises","$ce04d3a99e08e73b$var$refs","form","document","querySelector","submit","$ce04d3a99e08e73b$var$createPromise","position","delay","promise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","e","Number","currentTarget","elements","value","step","amount","preventDefault","delay1","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.1ef07349.js.map"}